<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: release | Ethereum J]]></title>
  <link href="http://ethereumj.io/blog/categories/release/atom.xml" rel="self"/>
  <link href="http://ethereumj.io/"/>
  <updated>2016-04-05T18:10:40-04:00</updated>
  <id>http://ethereumj.io/</id>
  <author>
    <name><![CDATA[Roman Mandeleil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Release: 1.2.0  Homestead Final Release]]></title>
    <link href="http://ethereumj.io/blog/2016/04/05/release-1-dot-2-0-homestead-final-release/"/>
    <updated>2016-04-05T17:57:40-04:00</updated>
    <id>http://ethereumj.io/blog/2016/04/05/release-1-dot-2-0-homestead-final-release</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/release-ilustration-1.gif" title="Release 1.2.0" ></p>

<p>by Anton Nashatyrev</p>

<p>Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services</p>

<h5>Homestead compatibility</h5>

<p>Starting from the earlier 1.2.0 Release Candidate EthereumJ is 100% Homestead compatible</p>

<h5>Solidity compiler is now embedded into EthereumJ</h5>

<p>Using Solidity contracts is now pretty easy from Java as we embedded <code>solc</code> compiler (thanks to our collegues from <a href="https://github.com/ethereum/solidity">Ethereum-cpp</a> team) into EthereumJ for all supported platforms (Windows, Linux, Mac OS X).</p>

<p>For usage sample please refer to a simple JUnit test: <a href="https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/test/java/org/ethereum/solidity/CompilerTest.java">CompilerTest</a></p>

<h5>Handy helper classes to create/invoke/test contracts on a local standalone blockchain</h5>

<p>As a next step after embedding the Solidity compiler we added some handy and easy to use helper classes. Now creating and testing a Solidity contract in Java without connecting to any Ethereum network became incredibly easy.
<code>
    StandaloneBlockchain bc = new StandaloneBlockchain();
    SolidityContract contract = bc.submitNewContract("contract A { uint a; ... }");
    contract.callFunction("funcName", "arg1", 2, new byte[] {1,2,3}, "arg4");
    bc.createBlock()
    System.out.println("Result: " + contract.callConstFunction("getResultFunc"));
</code>
You may cover any complex Solidity contract with Java unit tests and debug the EVM execution in any complex case.</p>

<p>For more details take a look at the small <a href="https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/main/java/org/ethereum/samples/StandaloneBlockchainSample.java">sample</a> and <a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/util/blockchain">helper classes</a> docs</p>

<h5>Performance and memory footprint optimization</h5>

<p>We further optimized performance and now first 1M blocks can be imported in less than 1 hour (depending on the hardware). Memory footprint had been also reduced and the node could now be started with <code>-Xmx256M</code> (with some config changes).</p>

<h5>More stable node run</h5>

<p>We have fixed amount of bugs, refactored blockchain sync process and made it more reliable, upgraded Windows <code>LevelDB</code> version to <code>1.18</code> (which fixed periodical DB crash)</p>

<h5>Running EthereumJ</h5>

<h6>Adding as maven artifact to your project:</h6>

<p><figure class='code'><figcaption><span>Maven Snippet <a href="https://gist.github.com/romanman/5f20d68d294ec1d049b5">https://gist.github.com/romanman/5f20d68d294ec1d049b5</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>    <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>oss.jfrog.org<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Repository from Bintray<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://dl.bintray.com/ethereum/maven&quot;</span><span class="nt">&gt;</span>http://dl.bintray.com/ethereum/maven<span class="nt">&lt;/a&gt;&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.ethereum<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>ethereumj-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.2.0-RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>or gradle:</p>

<p><figure class='code'><figcaption><span>Gradle Snippet <a href="https://gist.github.com/romanman/55964ce71acdd9b51d8c">https://gist.github.com/romanman/55964ce71acdd9b51d8c</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://dl.bintray.com/ethereum/maven&quot;</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//dl.bintray.com/ethereum/maven&lt;/a&gt;&amp;rdquo;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">compile</span> <span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">ethereum</span><span class="o">:</span><span class="n">ethereumj</span><span class="o">-</span><span class="nl">core:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">RELEASE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As a starting point for your own project take a look at <a href="https://github.com/ether-camp/ethereumj.starter">https://github.com/ether-camp/ethereumj.starter</a></p>

<h6>Running from command line:</h6>

<p><figure class='code'><figcaption><span>command line <a href="https://gist.github.com/romanman/0bd6df410689af1a86b4">https://gist.github.com/romanman/0bd6df410689af1a86b4</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/ethereum/ethereumj&quot;</span>&gt;https://github.com/ethereum/ethereumj&lt;/a&gt;
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> gradlew run <span class="o">[</span>-PmainClass<span class="o">=</span>&lt;sample class&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>Importing project to IntelliJ IDEA:</h6>

<p><figure class='code'><figcaption><span>command line <a href="https://gist.github.com/romanman/ab27a4a0d879ded73aa3">https://gist.github.com/romanman/ab27a4a0d879ded73aa3</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/ethereum/ethereumj&quot;</span>&gt;https://github.com/ethereum/ethereumj&lt;/a&gt;
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> gradlew build
</span></code></pre></td></tr></table></div></figure></p>

<p>  IDEA:
* File -> New -> Project from existing sources…
* Select <code>ethereumj/build.gradle</code>
* Dialog “Import Project from gradle”: press “OK”
* After building run either <code>org.ethereum.Start</code>, one of <code>org.ethereum.samples.*</code> or create your own main.</p>

<h5>Configuring EthereumJ</h5>

<p>For reference on all existing options, their description and defaults you may refer to the default config <code>ethereumj.conf</code> (you may find it in either the library jar or in the source tree <code>ethereum-core/src/main/resources</code>)
To override needed options you may use one of the following ways:</p>

<ul>
<li>put your options to the <code>&lt;working dir&gt;/config/ethereumj.conf</code> file</li>
<li>put <code>user.conf</code> to the root of your classpath (as a resource)</li>
<li>put your options to any file and supply it via <code>-Dethereumj.conf.file=&lt;your config&gt;</code></li>
<li>programmatically by using <code>SystemProperties.CONFIG.override*()</code></li>
<li>programmatically using by overriding Spring <code>SystemProperties</code> bean</li>
</ul>


<p>Note that don’t need to put all the options to your custom config, just those you want to override.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release: 1.1.0 pre homestead release]]></title>
    <link href="http://ethereumj.io/blog/2016/02/11/release-1-1-0/"/>
    <updated>2016-02-11T14:03:57-05:00</updated>
    <id>http://ethereumj.io/blog/2016/02/11/release-1-1-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/release-ilustration-1.gif" title="Release 1.0.0-RC1" ></p>

<p>That version is pre homestead version</p>

<p> Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services</p>

<h5>Pure Java Miner</h5>

<p>We support mining now! It is currently implemented in pure Java and can
be used in private and test networks. You may even mine on the live Ethereum
network however it is not economically feasible of course.</p>

<p>The miner can run in two modes ‘cache-only’ and ‘full-dataset’. For the same
difficulty the first one requires much more time to calculate a block nonce but
takes only 16Mb of RAM while the latter takes 1Gb but runs much faster. The
first one can be used for testing with lowered difficulty.</p>

<!--more-->


<p>The mining can be started by ‘mine.start’ config option which makes the miner started
either immediately on startup or when the blockchain is synced with the network. Another
option is starting the miner programmatically by invoking <code>Ethereum.getBlockMiner().startMining()</code>.
To monitor miner events you may want to implement and add <code>MinerListener</code></p>

<p>The <code>PrivateMinerSample</code> demonstrates creation of a simple 2 peer private network with a miner.
<code>
 ./gradlew run -PmainClass=org.ethereum.samples.PrivateMinerSample
</code></p>

<h5>Eth protocol 61/62 support</h5>

<p>This release remains in line with the whole Ethereum network where 95% of peers moved to the latest Eth62 subprotocol. The most significant improvement of the Eth62 protocol is more flexible block exchange messages which improves the sync speed.</p>

<h5>PendingState</h5>

<p>PendingState is when you can see the state change immediately after transaction submit instead of waiting for a block where your transaction is included.
For example if you send the value transfer transaction the PendingState will immediately reflect balance changes of sender and receiver (including mining fees) or indicates that transaction will not be accepted. This transaction is stored as a pending transaction until a new block is arrived. If the block contains that transaction it is removed from the PendingState, else the transaction is recalculated based on the latest block and you may see the updated state.</p>

<p>Try running <code>PendingStateSample</code> to see how it works on practice.
<code>
 ./gradlew run -PmainClass=org.ethereum.samples.PendingStateSample
</code></p>

<h5>Contract invocations becomes easier</h5>

<p>We have added utility classes to make the contract call transactions construction much easier. You may do this by either supplying a Solidity contract ABI or manually constructing each function by passing its name and input/output parameter types. You may pass functions arguments as a regular Java objects which are flexibly converted to Solidity types. The same way return values are parsed and represented as corresponding Java types.
The same way you may call constant function that is function invocation without propagating transaction to the network and without any changes to the contract state. So if you need to get some value from a contract you just do a constant call - that costs nothing, executed immediately and return you a value. To be completely precise you may call any function (not necessarily effectively constant) and get correct result but the contract state remains the same as before the call.</p>

<p>You may want to take a look at <code>PriceFeedSample</code> for introduction.
<code>
 ./gradlew run -PmainClass=org.ethereum.samples.PriceFeedSample
</code></p>

<h5>Finer and more flexible config</h5>

<p>There are much more options now on how to configure your EthereumJ instance.
For reference on all existing options, their description and defaults you may refer to the default config <code>ethereumj.conf</code> (you may find it in either the library jar or in the source tree <code>ethereum-core/src/main/resources</code>)
To override needed options you may use one of the following ways:</p>

<ul>
<li>put your options to the <code>&lt;working dir&gt;/config/ethereumj.conf file</code></li>
<li>put <code>user.conf</code> to the root of your classpath (as a resource)</li>
<li>put your options to any file and supply it via <code>-Dethereumj.conf.file=&lt;your config&gt;</code></li>
<li>programmatically by using <code>SystemProperties.CONFIG.override*()</code></li>
<li>programmatically using by overriding Spring <code>SystemProperties</code> bean</li>
</ul>


<p>Note that don’t need to put all the options to your custom config, just those you want to override.</p>

<h5>Running several nodes in a single JVM</h5>

<p>We removed the majority of statics in the EthereumJ code and substituted it with per Spring AppContext instances. That allows to create several separate instances of EthereumJ within a single JVM. So you can configure and start your small private network in a single JVM just from your main() method.</p>

<p>To see how that can be configured please refer to the <code>PrivateMinerSample</code>
<code>
 ./gradlew run -PmainClass=org.ethereum.samples.PrivateMinerSample
</code></p>

<h5>Whisper upgrade</h5>

<p>Whisper protocol has been upgraded to version 3 so if your private network supports Whisper you can use EthereumJ implementation together with the latest C++ Whisper capable nodes.</p>

<h5>Gas price calculator</h5>

<p>Pretty tiny but quite convenient feature which just gives you a reasonable gas price for your transaction. This value is just a statistics of the latest N transaction gas prices.</p>

<p>See how <code>PendingStateSample</code> uses that feature.
<code>
 ./gradlew run -PmainClass=org.ethereum.samples.PendingStateSample
</code></p>

<h5>Running EthereumJ</h5>

<h6>Adding as maven artifact to your project:</h6>

<p><figure class='code'><figcaption><span>Maven Snippet <a href="https://gist.github.com/romanman/5f20d68d294ec1d049b5">https://gist.github.com/romanman/5f20d68d294ec1d049b5</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>    <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>oss.jfrog.org<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Repository from Bintray<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://dl.bintray.com/ethereum/maven&quot;</span><span class="nt">&gt;</span>http://dl.bintray.com/ethereum/maven<span class="nt">&lt;/a&gt;&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.ethereum<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>ethereumj-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.1.0-RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>or gradle:</p>

<p><figure class='code'><figcaption><span>Gradle Snippet <a href="https://gist.github.com/romanman/55964ce71acdd9b51d8c">https://gist.github.com/romanman/55964ce71acdd9b51d8c</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://dl.bintray.com/ethereum/maven&quot;</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//dl.bintray.com/ethereum/maven&lt;/a&gt;&amp;rdquo;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">compile</span> <span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">ethereum</span><span class="o">:</span><span class="n">ethereumj</span><span class="o">-</span><span class="nl">core:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">RELEASE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As a starting point for your own project take a look at <a href="https://github.com/ether-camp/ethereumj.starter">https://github.com/ether-camp/ethereumj.starter</a></p>

<h6>Running from command line:</h6>

<p><figure class='code'><figcaption><span>command line <a href="https://gist.github.com/romanman/0bd6df410689af1a86b4">https://gist.github.com/romanman/0bd6df410689af1a86b4</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/ethereum/ethereumj&quot;</span>&gt;https://github.com/ethereum/ethereumj&lt;/a&gt;
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> ./gradlew run <span class="o">[</span>-PmainClass<span class="o">=</span>&lt;sample class&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>Importing project to IntelliJ IDEA:</h6>

<p><figure class='code'><figcaption><span>command line <a href="https://gist.github.com/romanman/ab27a4a0d879ded73aa3">https://gist.github.com/romanman/ab27a4a0d879ded73aa3</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/ethereum/ethereumj&quot;</span>&gt;https://github.com/ethereum/ethereumj&lt;/a&gt;
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> ./gradlew build
</span></code></pre></td></tr></table></div></figure></p>

<p>  IDEA:
* File -> New -> Project from existing sources…
* Select <code>ethereumj/build.gradle</code>
* Dialog “Import Project from gradle”: press “OK”
* After building run either <code>org.ethereum.Start</code>, one of <code>org.ethereum.samples.*</code> or create your own main.</p>

<h5>Configuring EthereumJ</h5>

<p>For reference on all existing options, their description and defaults you may refer to the default config <code>ethereumj.conf</code> (you may find it in either the library jar or in the source tree <code>ethereum-core/src/main/resources</code>)
To override needed options you may use one of the following ways:</p>

<ul>
<li>put your options to the <code>&lt;working dir&gt;/config/ethereumj.conf</code> file</li>
<li>put <code>user.conf</code> to the root of your classpath (as a resource)</li>
<li>put your options to any file and supply it via <code>-Dethereumj.conf.file=&lt;your config&gt;</code></li>
<li>programmatically by using <code>SystemProperties.CONFIG.override*()</code></li>
<li>programmatically using by overriding Spring <code>SystemProperties</code> bean</li>
</ul>


<p>Note that don’t need to put all the options to your custom config, just those you want to override.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release: 1.0.0-RC1]]></title>
    <link href="http://ethereumj.io/blog/2015/07/29/release-1-0-0-RC1/"/>
    <updated>2015-07-29T17:03:57-04:00</updated>
    <id>http://ethereumj.io/blog/2015/07/29/release-1-0-0-RC1</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/release-ilustration-1.gif" title="Release 1.0.0-RC1" ></p>

<p>That version is first of the RC series for Frontier network.</p>

<p> Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services.a</p>

<h5>Getting Started</h5>

<p>To get started and include a java library into your project all you need is
to <!--more--> use your favorite build system, here is Maven and Gradlle snippet:</p>

<p><figure class='code'><figcaption><span>Maven Snippet <a href="https://gist.github.com/romanman/659e9e5b6b44b73b5755">https://gist.github.com/romanman/659e9e5b6b44b73b5755</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>     <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>       <span class="nt">&lt;id&gt;</span>oss.jfrog.org<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>       <span class="nt">&lt;name&gt;</span>Repository from Bintray<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>       <span class="nt">&lt;url&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://dl.bintray.com/ethereum/maven&quot;</span><span class="nt">&gt;</span>http://dl.bintray.com/ethereum/maven<span class="nt">&lt;/a&gt;&lt;/url&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/repositories&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>   <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>     <span class="nt">&lt;groupId&gt;</span>org.ethereum<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>     <span class="nt">&lt;artifactId&gt;</span>ethereumj-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>     <span class="nt">&lt;version&gt;</span>1.0.0-RC1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>     <span class="nt">&lt;type&gt;</span>zip<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>or</p>

<p><figure class='code'><figcaption><span>Gradle Snippet <a href="https://gist.github.com/romanman/cc82a7a698f800040e10">https://gist.github.com/romanman/cc82a7a698f800040e10</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;   repositories {</span>
</span><span class='line'><span class="s">     maven {</span>
</span><span class='line'><span class="s">      url &amp;ldquo;&lt;a href=&quot;http://dl.bintray.com/</span><span class="n">ethereum</span><span class="s">/maven&quot;&gt;http://dl.bintray.com/</span><span class="n">ethereum</span><span class="s">/maven&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">compile</span> <span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">ethereum</span><span class="o">:</span><span class="n">ethereumj</span><span class="o">-</span><span class="nl">core:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">RC1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p> Also we have very simple starter example - just do:
 <code>git clone https://github.com/ether-camp/ethereumj.starter</code>
   and you are ready to develop your first Ethereum application.
   Also it can be usefull to browse the code and study how ethereumj
   library is weaved into the application:
   <a href="https://github.com/ether-camp/ethereumj.starter">https://github.com/ether-camp/ethereumj.starter</a></p>

<p> <em>So, what is in:</em></p>

<h5>RLPx network layer for channel protection</h5>

<p>  Between each connected peers on the Ethereum network
  there is a security mechanism called RLPx - designed to provide
  an extremly protected channel by sophisticated encryption and decryption
  algorithm for all of the underlying traffic.</p>

<ul>
<li><code>org.ethereum.net.rlpx</code> - package providing full implementation for the RLPx protocol.</li>
</ul>


<h5>Peer Discovery</h5>

<p>  The peer discovery is Ethereum way to manage network topology and to provide the
  peer with best view of the network. Each peer tries over time to find best neighbours
  and to exchange information about sub protocols with them. That is beeing achieved
  by managing statistic table over the found peers by constant ongoing process.</p>

<ul>
<li><code>org.ethereum.net.rlpx.discover</code> - package providing full implementation for peer disovery protocol.</li>
</ul>


<h5>Multi Peer Blockchain Syncronization</h5>

<p>  The Ethereum protocol supports fast block chain download - using
  bittorent way of downloading multiple blocks simultaneously from different channels.</p>

<ul>
<li><code>org.ethereum.net.eth</code> - package providing full support of Eth subprotocol and multipeer blockschain synchronization</li>
</ul>


<h5>Full Ethereum VM Support</h5>

<p>  The heart of the Ethereum consensus protocol is the virtual machine.
  The virtual machines is running the contracts algorithms exactly the
  same way on all the peers, tested and compatible with all the implementations.</p>

<ul>
<li><code>org.ethereum.vm</code></li>
<li><code>org.ethereum.core</code> - packages providing full Ethereum virtual machine and consensys mechanism implementation</li>
</ul>


<h5>Ethereum Repository Updates and Manipulations</h5>

<p> The data structure that supports consensys validation
 algorithm, and eventually holding the full list of
 ethereum affairs is called Ethereum Repository.
 It makes masive use for Ethereum Trie data structure.
 More info about that magic Trie can be study <a href="/blog/2015/07/05/Ethereum-Trie/">here</a></p>

<ul>
<li><code>org.ethereum.repository</code> - package providing full Ethereum repository implementation</li>
</ul>


<h5>Testing Notes</h5>

<p> The EthereumJ librarey was tested on more than 830k blocks from POC-9 Olympics network and more than 7 million transactions, with final result of full consensus achieved.</p>

<p> The library supports 99% of compatabiltiy kit test cases. We support almost all test cases defined by
 Ethereum development group, the several adge cases that we formally do not support, which we decided to exclude
 at that stage for performance optimization.</p>

<h5>More Code Samples</h5>

<p> Another good place get started is to go and try code samples from our samples repository  <a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/samples">repository</a>
 you can run them right away after fetching them from the git.</p>
]]></content>
  </entry>
  
</feed>
