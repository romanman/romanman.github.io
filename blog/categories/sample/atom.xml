<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sample | Ethereum J]]></title>
  <link href="http://ethereumj.io/blog/categories/sample/atom.xml" rel="self"/>
  <link href="http://ethereumj.io/"/>
  <updated>2016-02-14T21:27:10-05:00</updated>
  <id>http://ethereumj.io/</id>
  <author>
    <name><![CDATA[Roman Mandeleil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Friendly Ether Bot]]></title>
    <link href="http://ethereumj.io/blog/2015/09/09/friendly-ether-bot/"/>
    <updated>2015-09-09T17:03:57-04:00</updated>
    <id>http://ethereumj.io/blog/2015/09/09/friendly-ether-bot</id>
    <content type="html"><![CDATA[<p>{% img center /images/posts/friendly-bot-1.png Friendly Ether Bot %}</p>

<p>Ethereum is a great system to achieve consensus between an independent peers, but if we want to pump data from the real world into the system , how exactly we do it ?</p>

<!--more-->


<p>Let&rsquo;s write a simple example of server bot to pump real price spot data into a special contract:
<a href="https://github.com/ether-camp/contracts/blob/master/PriceFeed.sol">PriceFeed.sol</a></p>

<p>The full example for the feed reporter can be clone from <a href="https://github.com/ether-camp/feed.reporter.ether.camp">feed.reporter.ether.camp</a>, we will just go over central code points :</p>

<ol>
<li>How to get info from the exchanges, we will use Poloniex exchange to get ETH price spots:</li>
</ol>


<p>{% codeblock Code example lang:java <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/service/PoloniexService.java">https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/service/PoloniexService.java</a> %}</p>

<pre><code>// Accessing the rest point
RestTemplate restTemplate = new RestTemplate();
String rpcEnd = "https://poloniex.com/public?command=returnTicker";

HttpHeaders headers = new HttpHeaders();
HttpEntity entity = new HttpEntity(headers);

ResponseEntity&lt;Map&lt;String, PoloniexInstrument&gt;&gt; response = null;


response = restTemplate.exchange(rpcEnd, GET, entity,
        new ParameterizedTypeReference&lt;Map&lt;String, PoloniexInstrument&gt;&gt;(){});

// parsing retrieved data 
Map&lt;String, PoloniexInstrument&gt; output = response.getBody();

for (MarketAsset asset : assets) {
    PoloniexInstrument pi = output.get(asset.getSymbol());
    ret.add(new MarketData(asset, new Date(), Double.parseDouble(pi.getLast())));
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>The full example can be seen here: <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/service/PoloniexService.java">PoloniexService.java</a></p>

<p>Now after we got the updated info from the real world exchange let&rsquo;s push it into the Ethereum contract:</p>

<p>{% codeblock Code example lang:java <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/scheduler/Scheduler.java">https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/scheduler/Scheduler.java</a> %}</p>

<p>// Accessing Ethereum managed been
Ethereum ethereum = ethereumBean.getEthereum();</p>

<p>CallTransaction.Function function = CallTransaction.Function.fromSignature(&ldquo;update&rdquo;,
        &ldquo;bytes32[]&rdquo;, &ldquo;uint[]&rdquo;, &ldquo;uint[]&rdquo;);</p>

<p>byte[] accountAddr = userKey.getAddress();</p>

<p>BigInteger nonce = ethereum.getRepository().getNonce(accountAddr);
log.info(&ldquo;======= Nonce: &rdquo; + nonce);
long t = System.currentTimeMillis();
String[] symbols = new String[lastData.size()];
int[] prices = new int[lastData.size()];
long[] timestamps = new long[lastData.size()];</p>

<p>for (int i = 0; i &lt; lastData.size(); i++) {
    symbols[i] = lastData.get(i).getAsset().getSymbol();
    prices[i] = (int) (lastData.get(i).getLastPrice() * 1_000_000);
    timestamps[i] = Utils.toUnixTime(lastData.get(i).getTime().getTime());
}</p>

<p>Transaction tx = CallTransaction.createCallTransaction(
        nonce.longValue(),
        70_000_000_000L, // => gas price
        1_000_000,       // => gas limit
        feedAccount,     // => the contract address we actually updating
        1,               // => value,  can be zero
        function,        // => abi definition of the call
        symbols, prices, timestamps // => params to update: for each: symbol~(price, timestamp)
);</p>

<p>tx.sign(userKey.getPrivKeyBytes());</p>

<p>log.info(&ldquo;=> Sending: &rdquo; + tx);
ethereum.submitTransaction(tx);</p>

<p>{% endcodeblock %}</p>

<p>The full example can be seen here: <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/scheduler/Scheduler.java">Scheduler.java</a></p>

<p>That is actually all you need to make your own bot to transfer data from the real world to an ethereum network.</p>

<p>After the contract is updated with data any other contract can access it and be built on top of market real prices. As we discussed in this forum post: <a href="http://forum.ethereum.org/discussion/3417/ask-%CE%9E-community-what-do-you-think-of-our-new-smart-contract-pricefeed">forum link</a></p>

<p>The last point we need to take care - is the actuall private key
for the account which will fund the ongoing update transactions,
here is how you should put it down in  <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/resources/pricefeed.conf">pricefeed.conf</a></p>

<p>{% codeblock Code example lang:java <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/resources/pricefeed.conf">https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/resources/pricefeed.conf</a> %}</p>

<p>// if the private key is a seed sha3(value) will be calculated
user.account.privateKey = &ldquo;my private key&rdquo;</p>

<p>{% endcodeblock %}</p>

<p>Now it&rsquo;s good time to try and clone/run the repository:</p>

<p>{% codeblock Code example lang:bash %}
git clone <a href="https://github.com/ether-camp/feed.reporter.ether.camp">https://github.com/ether-camp/feed.reporter.ether.camp</a>
cd feed.reporter.ether.camp
./gradlew bootRun
{% endcodeblock %}</p>

<p>To really enjoy this example I am chalenging you to add info
from more stock exchanges for assets that you care about
and we will merge your code into the git repo.</p>

<p>For any question or comment regarding that example you can ask us here <a href="https://gitter.im/ethereum/ethereumj">chat room</a>, or by leaving a comment directly.</p>
]]></content>
  </entry>
  
</feed>
