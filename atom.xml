<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ethereum J]]></title>
  <link href="http://ethereumj.io/atom.xml" rel="self"/>
  <link href="http://ethereumj.io/"/>
  <updated>2016-04-05T18:13:42-04:00</updated>
  <id>http://ethereumj.io/</id>
  <author>
    <name><![CDATA[Roman Mandeleil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Release: 1.2.0  Homestead Final Release]]></title>
    <link href="http://ethereumj.io/blog/2016/04/05/release-1-dot-2-0-homestead-final-release/"/>
    <updated>2016-04-05T17:57:40-04:00</updated>
    <id>http://ethereumj.io/blog/2016/04/05/release-1-dot-2-0-homestead-final-release</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://ethereumj.io/images/posts/release-ilustration-1.gif" title="Release 1.2.0" ></p>

<blockquote><p>by Anton Nashatyrev</p></blockquote>

<p>Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services</p>

<!--more-->


<p></p>

<h5>Homestead compatibility</h5>

<p>Starting from the earlier 1.2.0 Release Candidate EthereumJ is 100% Homestead compatible</p>

<h5>Solidity compiler is now embedded into EthereumJ</h5>

<p>Using Solidity contracts is now pretty easy from Java as we embedded <code>solc</code> compiler (thanks to our collegues from <a href="https://github.com/ethereum/solidity">Ethereum-cpp</a> team) into EthereumJ for all supported platforms (Windows, Linux, Mac OS X).</p>

<p>For usage sample please refer to a simple JUnit test: <a href="https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/test/java/org/ethereum/solidity/CompilerTest.java">CompilerTest</a></p>

<h5>Handy helper classes to create/invoke/test contracts on a local standalone blockchain</h5>

<p>As a next step after embedding the Solidity compiler we added some handy and easy to use helper classes. Now creating and testing a Solidity contract in Java without connecting to any Ethereum network became incredibly easy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>StandaloneBlockchain bc = new StandaloneBlockchain();
</span><span class='line'>SolidityContract contract = bc.submitNewContract("contract A { uint a; ... }");
</span><span class='line'>contract.callFunction("funcName", "arg1", 2, new byte[] {1,2,3}, "arg4");
</span><span class='line'>bc.createBlock()
</span><span class='line'>System.out.println("Result: " + contract.callConstFunction("getResultFunc"));</span></code></pre></td></tr></table></div></figure>


<p>You may cover any complex Solidity contract with Java unit tests and debug the EVM execution in any complex case.</p>

<p>For more details take a look at the small <a href="https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/main/java/org/ethereum/samples/StandaloneBlockchainSample.java">sample</a> and <a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/util/blockchain">helper classes</a> docs</p>

<h5>Performance and memory footprint optimization</h5>

<p>We further optimized performance and now first 1M blocks can be imported in less than 1 hour (depending on the hardware). Memory footprint had been also reduced and the node could now be started with <code>-Xmx256M</code> (with some config changes).</p>

<h5>More stable node run</h5>

<p>We have fixed amount of bugs, refactored blockchain sync process and made it more reliable, upgraded Windows <code>LevelDB</code> version to <code>1.18</code> (which fixed periodical DB crash)</p>

<h5>Running EthereumJ</h5>

<h6>Adding as maven artifact to your project:</h6>

<figure class='code'><figcaption><span>Maven Snippet</span><a href='https://gist.github.com/romanman/5f20d68d294ec1d049b5'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>
</span><span class='line'><span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>oss.jfrog.org<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>Repository from Bintray<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url&gt;</span>http://dl.bintray.com/ethereum/maven<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.ethereum<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>ethereumj-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.2.0-RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>or gradle:</p>

<figure class='code'><figcaption><span>Gradle Snippet</span><a href='https://gist.github.com/romanman/55964ce71acdd9b51d8c'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="s2">&quot;http://dl.bintray.com/ethereum/maven&quot;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;org.ethereum:ethereumj-core:1.2.0-RELEASE&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As a starting point for your own project take a look at <a href="https://github.com/ether-camp/ethereumj.starter">https://github.com/ether-camp/ethereumj.starter</a></p>

<h6>Running from command line:</h6>

<figure class='code'><figcaption><span>command line</span><a href='https://gist.github.com/romanman/0bd6df410689af1a86b4'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone https://github.com/ethereum/ethereumj
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> gradlew run <span class="o">[</span>-PmainClass<span class="o">=</span>&lt;sample class&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h6>Importing project to IntelliJ IDEA:</h6>

<figure class='code'><figcaption><span>command line</span><a href='https://gist.github.com/romanman/ab27a4a0d879ded73aa3'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone https://github.com/ethereum/ethereumj
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> gradlew build
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>  IDEA:
* File -> New -> Project from existing sources…
* Select <code>ethereumj/build.gradle</code>
* Dialog “Import Project from gradle”: press “OK”
* After building run either <code>org.ethereum.Start</code>, one of <code>org.ethereum.samples.*</code> or create your own main.</p>

<h5>Configuring EthereumJ</h5>

<p>For reference on all existing options, their description and defaults you may refer to the default config <code>ethereumj.conf</code> (you may find it in either the library jar or in the source tree <code>ethereum-core/src/main/resources</code>)
To override needed options you may use one of the following ways:</p>

<ul>
<li>put your options to the <code>&lt;working dir&gt;/config/ethereumj.conf</code> file</li>
<li>put <code>user.conf</code> to the root of your classpath (as a resource)</li>
<li>put your options to any file and supply it via <code>-Dethereumj.conf.file=&lt;your config&gt;</code></li>
<li>programmatically by using <code>SystemProperties.CONFIG.override*()</code></li>
<li>programmatically using by overriding Spring <code>SystemProperties</code> bean</li>
</ul>


<p>Note that don’t need to put all the options to your custom config, just those you want to override.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release: 1.1.0 pre homestead release]]></title>
    <link href="http://ethereumj.io/blog/2016/02/11/release-1-1-0/"/>
    <updated>2016-02-11T14:03:57-05:00</updated>
    <id>http://ethereumj.io/blog/2016/02/11/release-1-1-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://ethereumj.io/images/posts/release-ilustration-1.gif" title="Release 1.0.0-RC1" ></p>

<p>That version is pre homestead version</p>

<p> Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services</p>

<h5>Pure Java Miner</h5>

<p>We support mining now! It is currently implemented in pure Java and can
be used in private and test networks. You may even mine on the live Ethereum
network however it is not economically feasible of course.</p>

<p>The miner can run in two modes ‘cache-only’ and ‘full-dataset’. For the same
difficulty the first one requires much more time to calculate a block nonce but
takes only 16Mb of RAM while the latter takes 1Gb but runs much faster. The
first one can be used for testing with lowered difficulty.</p>

<!--more-->


<p>The mining can be started by ‘mine.start’ config option which makes the miner started
either immediately on startup or when the blockchain is synced with the network. Another
option is starting the miner programmatically by invoking <code>Ethereum.getBlockMiner().startMining()</code>.
To monitor miner events you may want to implement and add <code>MinerListener</code></p>

<p>The <code>PrivateMinerSample</code> demonstrates creation of a simple 2 peer private network with a miner.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ./gradlew run -PmainClass=org.ethereum.samples.PrivateMinerSample</span></code></pre></td></tr></table></div></figure>


<h5>Eth protocol 61/62 support</h5>

<p>This release remains in line with the whole Ethereum network where 95% of peers moved to the latest Eth62 subprotocol. The most significant improvement of the Eth62 protocol is more flexible block exchange messages which improves the sync speed.</p>

<h5>PendingState</h5>

<p>PendingState is when you can see the state change immediately after transaction submit instead of waiting for a block where your transaction is included.
For example if you send the value transfer transaction the PendingState will immediately reflect balance changes of sender and receiver (including mining fees) or indicates that transaction will not be accepted. This transaction is stored as a pending transaction until a new block is arrived. If the block contains that transaction it is removed from the PendingState, else the transaction is recalculated based on the latest block and you may see the updated state.</p>

<p>Try running <code>PendingStateSample</code> to see how it works on practice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ./gradlew run -PmainClass=org.ethereum.samples.PendingStateSample</span></code></pre></td></tr></table></div></figure>


<h5>Contract invocations becomes easier</h5>

<p>We have added utility classes to make the contract call transactions construction much easier. You may do this by either supplying a Solidity contract ABI or manually constructing each function by passing its name and input/output parameter types. You may pass functions arguments as a regular Java objects which are flexibly converted to Solidity types. The same way return values are parsed and represented as corresponding Java types.
The same way you may call constant function that is function invocation without propagating transaction to the network and without any changes to the contract state. So if you need to get some value from a contract you just do a constant call - that costs nothing, executed immediately and return you a value. To be completely precise you may call any function (not necessarily effectively constant) and get correct result but the contract state remains the same as before the call.</p>

<p>You may want to take a look at <code>PriceFeedSample</code> for introduction.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ./gradlew run -PmainClass=org.ethereum.samples.PriceFeedSample</span></code></pre></td></tr></table></div></figure>


<h5>Finer and more flexible config</h5>

<p>There are much more options now on how to configure your EthereumJ instance.
For reference on all existing options, their description and defaults you may refer to the default config <code>ethereumj.conf</code> (you may find it in either the library jar or in the source tree <code>ethereum-core/src/main/resources</code>)
To override needed options you may use one of the following ways:</p>

<ul>
<li>put your options to the <code>&lt;working dir&gt;/config/ethereumj.conf file</code></li>
<li>put <code>user.conf</code> to the root of your classpath (as a resource)</li>
<li>put your options to any file and supply it via <code>-Dethereumj.conf.file=&lt;your config&gt;</code></li>
<li>programmatically by using <code>SystemProperties.CONFIG.override*()</code></li>
<li>programmatically using by overriding Spring <code>SystemProperties</code> bean</li>
</ul>


<p>Note that don’t need to put all the options to your custom config, just those you want to override.</p>

<h5>Running several nodes in a single JVM</h5>

<p>We removed the majority of statics in the EthereumJ code and substituted it with per Spring AppContext instances. That allows to create several separate instances of EthereumJ within a single JVM. So you can configure and start your small private network in a single JVM just from your main() method.</p>

<p>To see how that can be configured please refer to the <code>PrivateMinerSample</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ./gradlew run -PmainClass=org.ethereum.samples.PrivateMinerSample</span></code></pre></td></tr></table></div></figure>


<h5>Whisper upgrade</h5>

<p>Whisper protocol has been upgraded to version 3 so if your private network supports Whisper you can use EthereumJ implementation together with the latest C++ Whisper capable nodes.</p>

<h5>Gas price calculator</h5>

<p>Pretty tiny but quite convenient feature which just gives you a reasonable gas price for your transaction. This value is just a statistics of the latest N transaction gas prices.</p>

<p>See how <code>PendingStateSample</code> uses that feature.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ./gradlew run -PmainClass=org.ethereum.samples.PendingStateSample</span></code></pre></td></tr></table></div></figure>


<h5>Running EthereumJ</h5>

<h6>Adding as maven artifact to your project:</h6>

<figure class='code'><figcaption><span>Maven Snippet</span><a href='https://gist.github.com/romanman/5f20d68d294ec1d049b5'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>
</span><span class='line'><span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>oss.jfrog.org<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>Repository from Bintray<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url&gt;</span>http://dl.bintray.com/ethereum/maven<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.ethereum<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>ethereumj-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.1.0-RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>or gradle:</p>

<figure class='code'><figcaption><span>Gradle Snippet</span><a href='https://gist.github.com/romanman/55964ce71acdd9b51d8c'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="s2">&quot;http://dl.bintray.com/ethereum/maven&quot;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;org.ethereum:ethereumj-core:1.1.0-RELEASE&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As a starting point for your own project take a look at <a href="https://github.com/ether-camp/ethereumj.starter">https://github.com/ether-camp/ethereumj.starter</a></p>

<h6>Running from command line:</h6>

<figure class='code'><figcaption><span>command line</span><a href='https://gist.github.com/romanman/0bd6df410689af1a86b4'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone https://github.com/ethereum/ethereumj
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> ./gradlew run <span class="o">[</span>-PmainClass<span class="o">=</span>&lt;sample class&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h6>Importing project to IntelliJ IDEA:</h6>

<figure class='code'><figcaption><span>command line</span><a href='https://gist.github.com/romanman/ab27a4a0d879ded73aa3'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> git clone https://github.com/ethereum/ethereumj
</span><span class='line'> <span class="nb">cd </span>ethereumj
</span><span class='line'> ./gradlew build
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>  IDEA:
* File -> New -> Project from existing sources…
* Select <code>ethereumj/build.gradle</code>
* Dialog “Import Project from gradle”: press “OK”
* After building run either <code>org.ethereum.Start</code>, one of <code>org.ethereum.samples.*</code> or create your own main.</p>

<h5>Configuring EthereumJ</h5>

<p>For reference on all existing options, their description and defaults you may refer to the default config <code>ethereumj.conf</code> (you may find it in either the library jar or in the source tree <code>ethereum-core/src/main/resources</code>)
To override needed options you may use one of the following ways:</p>

<ul>
<li>put your options to the <code>&lt;working dir&gt;/config/ethereumj.conf</code> file</li>
<li>put <code>user.conf</code> to the root of your classpath (as a resource)</li>
<li>put your options to any file and supply it via <code>-Dethereumj.conf.file=&lt;your config&gt;</code></li>
<li>programmatically by using <code>SystemProperties.CONFIG.override*()</code></li>
<li>programmatically using by overriding Spring <code>SystemProperties</code> bean</li>
</ul>


<p>Note that don’t need to put all the options to your custom config, just those you want to override.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly Ether Bot]]></title>
    <link href="http://ethereumj.io/blog/2015/09/09/friendly-ether-bot/"/>
    <updated>2015-09-09T17:03:57-04:00</updated>
    <id>http://ethereumj.io/blog/2015/09/09/friendly-ether-bot</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://ethereumj.io/images/posts/friendly-bot-1.png" title="Friendly Ether Bot" ></p>

<p>Ethereum is a great system to achieve consensus between an independent peers, but if we want to pump data from the real world into the system , how exactly we do it ?</p>

<!--more-->


<p>Let&rsquo;s write a simple example of server bot to pump real price spot data into a special contract:
<a href="https://github.com/ether-camp/contracts/blob/master/PriceFeed.sol">PriceFeed.sol</a></p>

<p>The full example for the feed reporter can be clone from <a href="https://github.com/ether-camp/feed.reporter.ether.camp">feed.reporter.ether.camp</a>, we will just go over central code points :</p>

<ol>
<li>How to get info from the exchanges, we will use Poloniex exchange to get ETH price spots:</li>
</ol>


<figure class='code'><figcaption><span>Code example</span><a href='https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/service/PoloniexService.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// Accessing the rest point</span>
</span><span class='line'>    <span class="n">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RestTemplate</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">rpcEnd</span> <span class="o">=</span> <span class="s">&quot;https://poloniex.com/public?command=returnTicker&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHeaders</span><span class="o">();</span>
</span><span class='line'>    <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpEntity</span><span class="o">(</span><span class="n">headers</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">PoloniexInstrument</span><span class="o">&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">exchange</span><span class="o">(</span><span class="n">rpcEnd</span><span class="o">,</span> <span class="n">GET</span><span class="o">,</span> <span class="n">entity</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">ParameterizedTypeReference</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">PoloniexInstrument</span><span class="o">&gt;&gt;(){});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// parsing retrieved data </span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">PoloniexInstrument</span><span class="o">&gt;</span> <span class="n">output</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">MarketAsset</span> <span class="n">asset</span> <span class="o">:</span> <span class="n">assets</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PoloniexInstrument</span> <span class="n">pi</span> <span class="o">=</span> <span class="n">output</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">asset</span><span class="o">.</span><span class="na">getSymbol</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">MarketData</span><span class="o">(</span><span class="n">asset</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Date</span><span class="o">(),</span> <span class="n">Double</span><span class="o">.</span><span class="na">parseDouble</span><span class="o">(</span><span class="n">pi</span><span class="o">.</span><span class="na">getLast</span><span class="o">())));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full example can be seen here: <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/service/PoloniexService.java">PoloniexService.java</a></p>

<p>Now after we got the updated info from the real world exchange let&rsquo;s push it into the Ethereum contract:</p>

<figure class='code'><figcaption><span>Code example</span><a href='https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/scheduler/Scheduler.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Accessing Ethereum managed been </span>
</span><span class='line'><span class="n">Ethereum</span> <span class="n">ethereum</span> <span class="o">=</span> <span class="n">ethereumBean</span><span class="o">.</span><span class="na">getEthereum</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">CallTransaction</span><span class="o">.</span><span class="na">Function</span> <span class="n">function</span> <span class="o">=</span> <span class="n">CallTransaction</span><span class="o">.</span><span class="na">Function</span><span class="o">.</span><span class="na">fromSignature</span><span class="o">(</span><span class="s">&quot;update&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;bytes32[]&quot;</span><span class="o">,</span> <span class="s">&quot;uint[]&quot;</span><span class="o">,</span> <span class="s">&quot;uint[]&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">accountAddr</span> <span class="o">=</span> <span class="n">userKey</span><span class="o">.</span><span class="na">getAddress</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">BigInteger</span> <span class="n">nonce</span> <span class="o">=</span> <span class="n">ethereum</span><span class="o">.</span><span class="na">getRepository</span><span class="o">().</span><span class="na">getNonce</span><span class="o">(</span><span class="n">accountAddr</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;======= Nonce: &quot;</span> <span class="o">+</span> <span class="n">nonce</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">t</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">symbols</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">lastData</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">lastData</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'><span class="kt">long</span><span class="o">[]</span> <span class="n">timestamps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">lastData</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lastData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">symbols</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">lastData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getAsset</span><span class="o">().</span><span class="na">getSymbol</span><span class="o">();</span>
</span><span class='line'>    <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">lastData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getLastPrice</span><span class="o">()</span> <span class="o">*</span> <span class="mi">1_000_000</span><span class="o">);</span>
</span><span class='line'>    <span class="n">timestamps</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">toUnixTime</span><span class="o">(</span><span class="n">lastData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getTime</span><span class="o">().</span><span class="na">getTime</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Transaction</span> <span class="n">tx</span> <span class="o">=</span> <span class="n">CallTransaction</span><span class="o">.</span><span class="na">createCallTransaction</span><span class="o">(</span>
</span><span class='line'>        <span class="n">nonce</span><span class="o">.</span><span class="na">longValue</span><span class="o">(),</span>
</span><span class='line'>        <span class="mi">70_000_000_000L</span><span class="o">,</span> <span class="c1">// =&gt; gas price</span>
</span><span class='line'>        <span class="mi">1_000_000</span><span class="o">,</span>       <span class="c1">// =&gt; gas limit</span>
</span><span class='line'>        <span class="n">feedAccount</span><span class="o">,</span>     <span class="c1">// =&gt; the contract address we actually updating</span>
</span><span class='line'>        <span class="mi">1</span><span class="o">,</span>               <span class="c1">// =&gt; value,  can be zero</span>
</span><span class='line'>        <span class="n">function</span><span class="o">,</span>        <span class="c1">// =&gt; abi definition of the call</span>
</span><span class='line'>        <span class="n">symbols</span><span class="o">,</span> <span class="n">prices</span><span class="o">,</span> <span class="n">timestamps</span> <span class="c1">// =&gt; params to update: for each: symbol~(price, timestamp)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">tx</span><span class="o">.</span><span class="na">sign</span><span class="o">(</span><span class="n">userKey</span><span class="o">.</span><span class="na">getPrivKeyBytes</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;=&gt; Sending: &quot;</span> <span class="o">+</span> <span class="n">tx</span><span class="o">);</span>
</span><span class='line'><span class="n">ethereum</span><span class="o">.</span><span class="na">submitTransaction</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full example can be seen here: <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/java/com/ethercamp/feedreporter/scheduler/Scheduler.java">Scheduler.java</a></p>

<p>That is actually all you need to make your own bot to transfer data from the real world to an ethereum network.</p>

<p>After the contract is updated with data any other contract can access it and be built on top of market real prices. As we discussed in this forum post: <a href="http://forum.ethereum.org/discussion/3417/ask-%CE%9E-community-what-do-you-think-of-our-new-smart-contract-pricefeed">forum link</a></p>

<p>The last point we need to take care - is the actuall private key
for the account which will fund the ongoing update transactions,
here is how you should put it down in  <a href="https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/resources/pricefeed.conf">pricefeed.conf</a></p>

<figure class='code'><figcaption><span>Code example</span><a href='https://github.com/ether-camp/feed.reporter.ether.camp/blob/master/src/main/resources/pricefeed.conf'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// if the private key is a seed sha3(value) will be calculated</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">account</span><span class="o">.</span><span class="na">privateKey</span> <span class="o">=</span> <span class="s">&quot;my private key&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it&rsquo;s good time to try and clone/run the repository:</p>

<figure class='code'><figcaption><span>Code example </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/ether-camp/feed.reporter.ether.camp
</span><span class='line'><span class="nb">cd </span>feed.reporter.ether.camp
</span><span class='line'>./gradlew bootRun
</span></code></pre></td></tr></table></div></figure>


<p>To really enjoy this example I am chalenging you to add info
from more stock exchanges for assets that you care about
and we will merge your code into the git repo.</p>

<p>For any question or comment regarding that example you can ask us here <a href="https://gitter.im/ethereum/ethereumj">chat room</a>, or by leaving a comment directly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release: 1.0.0-RC1]]></title>
    <link href="http://ethereumj.io/blog/2015/07/29/release-1-0-0-RC1/"/>
    <updated>2015-07-29T17:03:57-04:00</updated>
    <id>http://ethereumj.io/blog/2015/07/29/release-1-0-0-RC1</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://ethereumj.io/images/posts/release-ilustration-1.gif" title="Release 1.0.0-RC1" ></p>

<p>That version is first of the RC series for Frontier network.</p>

<p> Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services.a</p>

<h5>Getting Started</h5>

<p>To get started and include a java library into your project all you need is
to <!--more--> use your favorite build system, here is Maven and Gradlle snippet:</p>

<figure class='code'><figcaption><span>Maven Snippet</span><a href='https://gist.github.com/romanman/659e9e5b6b44b73b5755'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>
</span><span class='line'>   <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>     <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>       <span class="nt">&lt;id&gt;</span>oss.jfrog.org<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>       <span class="nt">&lt;name&gt;</span>Repository from Bintray<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>       <span class="nt">&lt;url&gt;</span>http://dl.bintray.com/ethereum/maven<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>     <span class="nt">&lt;groupId&gt;</span>org.ethereum<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>     <span class="nt">&lt;artifactId&gt;</span>ethereumj-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>     <span class="nt">&lt;version&gt;</span>1.0.0-RC1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>     <span class="nt">&lt;type&gt;</span>zip<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>or</p>

<figure class='code'><figcaption><span>Gradle Snippet</span><a href='https://gist.github.com/romanman/cc82a7a698f800040e10'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="s2">&quot;http://dl.bintray.com/ethereum/maven&quot;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;org.ethereum:ethereumj-core:1.0.0-RC1&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p> Also we have very simple starter example - just do:
 <code>git clone https://github.com/ether-camp/ethereumj.starter</code>
   and you are ready to develop your first Ethereum application.
   Also it can be usefull to browse the code and study how ethereumj
   library is weaved into the application:
   <a href="https://github.com/ether-camp/ethereumj.starter">https://github.com/ether-camp/ethereumj.starter</a></p>

<p> <em>So, what is in:</em></p>

<h5>RLPx network layer for channel protection</h5>

<p>  Between each connected peers on the Ethereum network
  there is a security mechanism called RLPx - designed to provide
  an extremly protected channel by sophisticated encryption and decryption
  algorithm for all of the underlying traffic.</p>

<ul>
<li><code>org.ethereum.net.rlpx</code> - package providing full implementation for the RLPx protocol.</li>
</ul>


<h5>Peer Discovery</h5>

<p>  The peer discovery is Ethereum way to manage network topology and to provide the
  peer with best view of the network. Each peer tries over time to find best neighbours
  and to exchange information about sub protocols with them. That is beeing achieved
  by managing statistic table over the found peers by constant ongoing process.</p>

<ul>
<li><code>org.ethereum.net.rlpx.discover</code> - package providing full implementation for peer disovery protocol.</li>
</ul>


<h5>Multi Peer Blockchain Syncronization</h5>

<p>  The Ethereum protocol supports fast block chain download - using
  bittorent way of downloading multiple blocks simultaneously from different channels.</p>

<ul>
<li><code>org.ethereum.net.eth</code> - package providing full support of Eth subprotocol and multipeer blockschain synchronization</li>
</ul>


<h5>Full Ethereum VM Support</h5>

<p>  The heart of the Ethereum consensus protocol is the virtual machine.
  The virtual machines is running the contracts algorithms exactly the
  same way on all the peers, tested and compatible with all the implementations.</p>

<ul>
<li><code>org.ethereum.vm</code></li>
<li><code>org.ethereum.core</code> - packages providing full Ethereum virtual machine and consensys mechanism implementation</li>
</ul>


<h5>Ethereum Repository Updates and Manipulations</h5>

<p> The data structure that supports consensys validation
 algorithm, and eventually holding the full list of
 ethereum affairs is called Ethereum Repository.
 It makes masive use for Ethereum Trie data structure.
 More info about that magic Trie can be study <a href="http://ethereumj.io/blog/2015/07/05/Ethereum-Trie/">here</a></p>

<ul>
<li><code>org.ethereum.repository</code> - package providing full Ethereum repository implementation</li>
</ul>


<h5>Testing Notes</h5>

<p> The EthereumJ librarey was tested on more than 830k blocks from POC-9 Olympics network and more than 7 million transactions, with final result of full consensus achieved.</p>

<p> The library supports 99% of compatabiltiy kit test cases. We support almost all test cases defined by
 Ethereum development group, the several adge cases that we formally do not support, which we decided to exclude
 at that stage for performance optimization.</p>

<h5>More Code Samples</h5>

<p> Another good place get started is to go and try code samples from our samples repository  <a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/samples">repository</a>
 you can run them right away after fetching them from the git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Climbing Ethereum Trie]]></title>
    <link href="http://ethereumj.io/blog/2015/07/05/Ethereum-Trie/"/>
    <updated>2015-07-05T17:03:57-04:00</updated>
    <id>http://ethereumj.io/blog/2015/07/05/Ethereum-Trie</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://ethereumj.io/images/posts/trie-ilustration-1.jpg" title="Trie Headline" ></p>

<p>The Ethereum data structure which is used to calculate the state of all the current balances, all the contract code and even the storage which is occupied by a particular contract, is still difficult for some developers on the project. I actually found myself having a hard time trying to understand it. This is why I will try to make a clear and visual explanation of the simple concepts and ideas that stand behind this important structure.</p>

<!--more-->


<p><strong>Why do we need it?</strong></p>

<p>Before designing and using a new data structure, it’s always good to start by asking: “Why?” or more specifically, “What are the main requirements that we need so bad, that we are designing a new data structure?”</p>

<p>In our case we have three:</p>

<ol>
<li>We need a storage efficient hash map.</li>
<li>We need a very time efficient insert/delete hash map.</li>
<li>Most important: We need a fingerprint to identify the state of the whole structure. The fingerprint should be calculated very fast on the fly, obviously depended on all the changes the hash map going to have.</li>
</ol>


<p>So with the requirements defined, let’s see how the structure is built and why it is appropriate for our goals.</p>

<p><strong>1. How is the structure built?</strong></p>

<p>The structure will be a tree, which will be built on a principle of what is known as a Radix Tree, the Radix Tree principle can be explained simply as:</p>

<p>Given a key/value that should be inserted, the key will be split to it’s sub parts e.g. characters and each value will be a node in a tree, so if we want to retrieve the reference value we should jump from node to node each representing part of the key until we find the end and there we will have the value.</p>

<p>In our case we will split the key to a nibbles of it’s ASCII code, don’t worry the example will make it clear:</p>

<p>Let’s take a <code>“dog”</code> string as a key , in order to get it’s nibbles, will check the ASCII code which is <code>[ 0x64 0x6f 0x67 ]</code>, now the nibbles of the key are 4 bits of each byte: <code>6, 4, 6, f, 6, 7</code>.</p>

<p>Another example will be the key: “do” which obviously will be encoded to <code>6, 4, 6, f</code>. (“dog” with no “g”).</p>

<p>Now let’s see how we encode the key value <code>[“do” : “verb”]</code> and <code>[“dog” : “puppy”]</code> into a data structure: (Diagram - 1)</p>

<p><img class="center" src="http://ethereumj.io/images/posts/trie-post-diagram-1.png" title="Diagram-1" ></p>

<p>As we can see each node on the digaram has 17 elements which are representing slots for <code>[ 0..f ]</code> digits of encoding, and one more slot  - the last one, for the value (if it exist).</p>

<p>Now we see that to follow key: <code>“dog”</code> <code>(64 6f 67)</code> we simply follow the slot 6 in the first node, slot 4 in the second, slot 6 on the third, and so on until we bumped into a node that has a 17 slot  filled with value. Here we go <code>“dog”</code> leads as to <code>“puppy”</code> and the key: <code>“do”</code> stops two nibbles before <code>“dog”</code> and we found that the corresponding value is: <code>“verb”</code>.</p>

<p>That concludes the first step of making a Radix Tree in a new, hex slot oriented style.</p>

<p>So what do we get out of this complex structure? The answer is 2 things:</p>

<p>the keys with similar data will be saved economizing common prefixes.
the retrieve/insert of a value is about to be <code>O(log(n))</code> which is not bad at all.
 So far so good, can we improve it ?</p>

<ol>
<li><strong>How to improve it?</strong> : The next question is: how we can improve the structure to be more storage effective ? to answer that we define a rule that can be explained in simple words like that: given “too long path” for a single value , we can make a single node holding the full path as long as it has this only one value. As always example is the best to see it:</li>
</ol>


<p>Starting with the last diagram, let’s insert another key/value: [“doggiestan” : “aeswome_place”]. As we can see the key – “doggiestan” starts with “dog” (looks familiar?) and goes on with more characters. So in that case we are not going to encode the suffix “giestan” as a bunch of nodes but as a single key/value node: (Diagram - 2)</p>

<p><img class="center" src="http://ethereumj.io/images/posts/trie-post-diagram-2.png" title="Diagram-2" ></p>

<p><strong>3. How to encode the finger print? :  </strong></p>

<p>The fingerprint will be the sha3(root_node) function. One will probably ask: “Why it is unique?” or “Why does every change in the trie affect the root node?”  To answer that let’s closely observe the next diagram:</p>

<p><img class="center" src="http://ethereumj.io/images/posts/trie-post-diagram-3.png" title="Diagram-3" ></p>

<p>In previous diagrams we used arrows to point out a node reference by another node, but in the data world, no arrows exist. So how is the reference actually implemented? Simply by saving the hash of the next node, in our case using <code>sha3()</code> function. That way, the most important goal of reflecting a change in data of each node, is achieved. Each change to a node will be reflected in the hash of that node, hence reflecting in the parent, and also his parent, and so on up to the root_node. That’s why <code>sha3(root_node)</code> is the absolute fingerprint of the full structure.</p>

<p><strong>Summary:</strong>  Obviously the Trie structure as it is fully implemented holds more nuances and improvements. But once one understands the 3 principles that I have visualised here, it should be really easy to complete the picture by studying the actual code.</p>

<p>For futher investigation of the wonders of Trie , you can use our repository test cases, one I inserted especially for this post:</p>

<p>That is the runnig example for our test suite and can be used as start point for further study.</p>

<figure class='code'><figcaption><span>Code example</span><a href='https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/test/java/org/ethereum/trie/TrieTest.java#L917'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span> <span class="c1">// update the trie with blog key/val</span>
</span><span class='line'>          <span class="c1">// each time dump the entire trie</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSample_1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TrieImpl</span> <span class="n">trie</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TrieImpl</span><span class="o">(</span><span class="n">mockDb</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">trie</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;dog&quot;</span><span class="o">,</span> <span class="s">&quot;puppy&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">dmp</span> <span class="o">=</span> <span class="n">trie</span><span class="o">.</span><span class="na">getTrieDump</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dmp</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;ed6e08740e4a267eca9d4740f71f573e9aabbcc739b16a2fa6c1baed5ec21278&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Hex</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">trie</span><span class="o">.</span><span class="na">getRootHash</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">trie</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;do&quot;</span><span class="o">,</span> <span class="s">&quot;verb&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dmp</span> <span class="o">=</span> <span class="n">trie</span><span class="o">.</span><span class="na">getTrieDump</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dmp</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;779db3986dd4f38416bfde49750ef7b13c6ecb3e2221620bcad9267e94604d36&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Hex</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">trie</span><span class="o">.</span><span class="na">getRootHash</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">trie</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;doggiestan&quot;</span><span class="o">,</span> <span class="s">&quot;aeswome_place&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dmp</span> <span class="o">=</span> <span class="n">trie</span><span class="o">.</span><span class="na">getTrieDump</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dmp</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span>
</span><span class='line'>          <span class="s">&quot;8bd5544747b4c44d1274aa99a6293065fe319b3230e800203317e4c75a770099&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Hex</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">trie</span><span class="o">.</span><span class="na">getRootHash</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any questions or comments are welcome.</p>

<p>Thanks to: <strong>Nick Savers</strong> for reviewing the draft and making my language to a real English.</p>

<ul>
<li>by <strong>Roman Mandeleil</strong>: the founder of the mighty Ethereum java implementation also known as EthereumJ.</li>
</ul>

]]></content>
  </entry>
  
</feed>
